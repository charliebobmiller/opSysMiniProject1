//declaration of required libraries
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <arpa/inet.h>

//defining the port to bind
#define PORT 4444


//helper function declarations
//#include "stringArray.c"
#include "parseOptions.c"
char* menu_askClient_forFilename(int sock);
char* menu_askClient_forSortkey(int sock,char* choice_filename);
void doDisconnect(int sock);


//main function
int main(){

	//declaration of integer variables and structures
	int sk_fd, R;
	struct sockaddr_in serverAddr;

	int New_sock;
	struct sockaddr_in new_Addr;

	socklen_t addr_size;

	//defining buffer 
	char buff[1024];
	
	//defining pid's
	pid_t childpid;

	//defining socket feedback
	sk_fd = socket(AF_INET, SOCK_STREAM, 0);
	
	//if loop to know wheather the connection is successfull or not 
	if(sk_fd < 0){
		printf("[-]Connection error.\n");
		exit(1);
	}
	printf("[+]Server Socket creation successfull.\n");

	//declaration of memset and assigning respective values to serverAddr.sin....
	memset(&serverAddr, '\0', sizeof(serverAddr));
	serverAddr.sin_family = AF_INET;
	serverAddr.sin_port = htons(PORT);
	serverAddr.sin_addr.s_addr = inet_addr("127.0.0.1");

	//To know wheather the binding is successfull or not
	R = bind(sk_fd, (struct sockaddr*)&serverAddr, sizeof(serverAddr));
	if(R < 0){
		printf("[-]Binding Error.\n");
		exit(1);
	}
	printf("[+]Binded to port %d\n", 4444);

	//display as waiting for response from client
	if(listen(sk_fd, 10) == 0){
		printf("[+]Waiting for requestsâ€¦\n");
	}else{
		printf("[-]Binding Error.\n");
	}

	//creation of infinite loop till client returns exit or 0
	while(1){
		New_sock = accept(sk_fd, (struct sockaddr*)&new_Addr, &addr_size);
		if(New_sock < 0){
			exit(1);
		}
		printf("Connection accepted from %s:%d\n", inet_ntoa(new_Addr.sin_addr), ntohs(new_Addr.sin_port));

		//using fork to take responses from many clients simultaniously
		if((childpid = fork()) == 0){//FIXMe??does this track pid?
			close(sk_fd);

			while(1){
				bzero(buff,1024);
				printf("waiting for any input from client.\n");
				recv(New_sock, buff, 1024, 0);
				printf("input received: %s\n",buff);
				bzero(buff,1024);

				//client is now connected. ask client what file they want. 
				//get filenames from client
				//BUG: won't wait for client response when calling recv
				char* choice_filename = menu_askClient_forFilename(New_sock); 

				//BUG: won't wait for client response when calling recv

				//get sortkey from client
				char* choice_sortkey = menu_askClient_forSortkey(New_sock,choice_filename);

				stringArray uniqueKeys = getUniqueKeys(choice_filename,choice_sortkey);
				//now we want to fork a process for each unique key
				int* pids[uniqueKeys.numStrings];
				for(int i = 0; i < uniqueKeys.numStrings; i++) {//for every sort key
					pids[i] = fork();
					if (pids[i] == 0) spawnUniqueKeyProcess(uniqueKeys.headString[i]);
					printf("FIXME>> make new process for unique key:%d= [%s]\n",i,uniqueKeys.headString[i]);
				}

				//parent process

				//now we give client options for what to do with the data
				int choice_menuOptions = menu_askClient_forMenuOption(New_sock) //returns 1,2,3, or 4.


				//if 1, 
				printf("not starting over\n");
				exit(0);


			}
		}
	}

	close(New_sock);


	return 0;
}


char* menu_askClient_forFilename(int sock) {
	stringArray files = getFilenames(); //from parseoptions.c
	char* buff = malloc(sizeof(char) * 1024);

    int attempts = 0;
    strcpy(buff,"asdf"); //fill with garbage
    while ( ( atoi(buff) > 0 ) && ( atoi(buff) <= files.numStrings ) ) {

	//handle unknown input
	if (strcmp(buff,"asdf") != 0) 
		sprintf(buff,"Unknown input. please try again.\n");
	//display choices to user
		//generate menu message to send
		sprintf(buff,"%sPlease enter the index of file to use:\n",buff);
		for (int i = 0; i < files.numStrings; i++) {
			sprintf(buff, "%s%d) [%s]\n",buff,i+1,files.headString[i]);
		}
	send(sock, buff,strlen(buff),0); //send to client
	bzero(buff,1024); //clean buffer

	//take input from user
	recv(sock, buff, 1024, 0);//wont wait??????????
	attempts++;
	if (attempts > 5) doDisconnect(sock);
    }
    int fileIndex = atoi(buff);
    bzero(buff,1024);

    free(buff);
    return files.headString[fileIndex];
}


char* menu_askClient_forSortkey(int sock,char* choice_filename) {
	stringArray sortKeys = getSortKeys(choice_filename);
	char* buff = malloc(sizeof(char) * 1024);

    int attempts = 0;
    strcpy(buff,"asdf"); //fill with garbage
    while ( ( atoi(buff) > 0 ) && ( atoi(buff) <= sortKeys.numStrings ) ) {

	//handle unknown input
	if (strcmp(buff,"asdf") != 0) {
		sprintf(buff,"Unknown input. please try again.\n");
		send(sock, buff,strlen(buff),0); //send to client
		bzero(buff,1024); //clean buffer
	}
	//display choices to user
		//generate menu message to send
		sprintf(buff,"Please enter the index of sorting key to use:\n");
		for (int i = 0; i < sortKeys.numStrings; i++) {
			sprintf(buff, "%s%d) [%s]\n",buff,i+1,sortKeys.headString[i]);
		}
	send(sock, buff,strlen(buff),0); //send to client
	bzero(buff,1024); //clean buffer

	//take input from user
	recv(sock, buff, 1024, 0);
	attempts++;
	if (attempts > 5) doDisconnect(sock);
    }
    int keyIndex = atoi(buff);//user sees actual index
    bzero(buff,1024);



	free(buff);
	return sortKeys.headString[keyIndex];
}


void spawnUniqueKeyProcess(uniqueKeys.headString[i]) {
	
	//julius' process goes here hopefully

}


void doDisconnect(int sock) {
	//we want to like, actually cleanly disconnect the client. 
	//so we send the "disconnect" message, then kill them. 
	char* msg = "#disconnect";
	send(sock,msg,strlen(msg),0);

	//kill the process associated with this one
	//release the socket

	printf("dodisconnect is incomplete. exiting whole program.\n");
	exit(0);


}
